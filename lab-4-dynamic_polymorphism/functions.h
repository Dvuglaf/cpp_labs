#pragma once
#include<memory>
/*Иерархия классов: функции от одной переменной
.
Обеспечить, как минимум, следующее общее поведение:
•вычисление значения функции при заданном аргументе;
•получение функции, являющейся производной от текущей;
Предоставить, как минимум, следующие типы
данных:
константа;
линейная функция;
квадратичная функция;
синус;
косинус.

В основном меню приложения предоставить возможность определения функции в контейнере,
производная которой для заданного аргумента принимает наименьшее значение
.
Результат выводить ввиде:«изначальная функция; производная;значение производной»
. Если таких функций несколько, вывести первую из них
.Вычисление организовать двумя способами: своим кодом и с использованием библиотеки стандартных алгоритмов.*/
class functions
{
public:
	virtual std::shared_ptr<functions> derivative()noexcept = 0;
	virtual double value_point(double) const noexcept = 0;
	virtual bool equals(const functions& ) const noexcept = 0;//сравнение двух на равенство
	virtual void print()const noexcept = 0;//распечатка строкового представления объекта
	virtual ~functions() = default;
protected:
	/*functions() = default;
	functions(const functions&) = default;
	functions& operator=(const functions&) = default;*/
};